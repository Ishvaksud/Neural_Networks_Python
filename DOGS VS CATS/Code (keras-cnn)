import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
import keras

from keras.preprocessing.image import ImageDataGenerator

#Data augmentation
img_train_gen=ImageDataGenerator(
                                rescale=1./255,
                            shear_range=0.1,
                            zoom_range=0.2,
                            horizontal_flip=True,
                            width_shift_range=0.1,
                            height_shift_range=0.1
   )

img_test_gen=ImageDataGenerator(rescale=1./225)
train=img_train_gen.flow_from_directory("/Users/ishvaksud/Downloads/dogcat/cats_and_dogs_filtered/train",target_size=(64,64),batch_size=32,class_mode="binary")

test=img_test_gen.flow_from_directory("/Users/ishvaksud/Downloads/dogcat/cats_and_dogs_filtered/validation",target_size=(64,64),batch_size=32,class_mode="binary")

#model

from keras.models import Sequential
from keras.layers import Dense,Conv2D,BatchNormalization,Dropout,MaxPooling2D

layers=[
        keras.layers.Conv2D(32,activation="relu",kernel_size=(3,3),input_shape=(64,64,3)),
        keras.layers.BatchNormalization(),
        keras.layers.MaxPooling2D((2,2)),
        keras.layers.Dropout(0.3),
        
        keras.layers.Conv2D(64,activation="relu",kernel_size=(3,3)),
        keras.layers.BatchNormalization(),
        keras.layers.MaxPooling2D((2,2)),
        keras.layers.Dropout(0.3),
        
        keras.layers.Conv2D(32,activation="relu",kernel_size=(3,3)),
        keras.layers.Flatten(),
        keras.layers.Dense(64,"relu"),
        keras.layers.Dense(1,"sigmoid")
    
        
        ]

model=Sequential(layers)

model.summary()

model.compile(loss="binary_crossentropy",metrics=["accuracy"],optimizer="adam")

model.fit(train,epochs=20,validation_data=test)

model.evaluate(train)


