import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
import keras
import cv2

(X_train,y_train),(X_test,y_test)=keras.datasets.mnist.load_data()

#Normalization
X_train=X_train/255
X_test=X_test/255


X_train.shape
height,width=28,28
input_shape=(28,28,1)

#Reshaping
X_train=X_train.reshape(X_train.shape[0],height,width,1)
X_test=X_test.reshape(X_test.shape[0],height,width,1)


from keras.layers import Conv2D,Dense
from keras.models import Sequential

layers=[
        keras.layers.Conv2D(6,kernel_size=(5,5),activation="tanh",input_shape=input_shape),
        keras.layers.AveragePooling2D((2,2),strides=(2,2)),
        keras.layers.Conv2D(16,(5,5),activation="tanh"),
        keras.layers.AveragePooling2D((2,2),strides=(2,2)),
        keras.layers.Flatten(),
        keras.layers.Dense(120,activation="tanh"),
        keras.layers.Dense(84,activation="tanh"),
        keras.layers.Dense(10,activation="softmax")
        
        ]

model=Sequential(layers)
model.compile(loss="sparse_categorical_crossentropy",optimizer=tf.keras.optimizers.SGD(lr=0.01),metrics=["accuracy"])

model.fit(X_train,y_train,epochs=15,batch_size=124)

model.evaluate(X_test,y_test)

pred=model.predict(X_test)

y_predicted_labels = [np.argmax(i) for i in pred]

cm = tf.math.confusion_matrix(labels=y_test,predictions=y_predicted_labels)

cm

plt.figure(figsize = (10,7))
sns.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

from sklearn.metrics import accuracy_score

print(accuracy_score(y_test,y_predicted_labels))
